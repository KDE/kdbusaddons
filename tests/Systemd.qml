/*
 * This file was generated by kdbusxml2qml version 1.0
 * Source file was systemd.xml
 *
 * kdbusxml2qml is KDE
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

import QtQuick
import org.kde.dbusaddons

QtObject {
    property DBusInterface iface
    readonly property string interfaceName: "org.freedesktop.systemd1.Manager"
    readonly property var propertySignatures: {
        "Architecture": "s",
        "ConfidentialVirtualization": "s",
        "ConfirmSpawn": "b",
        "ControlGroup": "s",
        "CtrlAltDelBurstAction": "s",
        "DefaultBlockIOAccounting": "b",
        "DefaultCPUAccounting": "b",
        "DefaultDeviceTimeoutUSec": "t",
        "DefaultIOAccounting": "b",
        "DefaultIPAccounting": "b",
        "DefaultLimitAS": "t",
        "DefaultLimitASSoft": "t",
        "DefaultLimitCORE": "t",
        "DefaultLimitCORESoft": "t",
        "DefaultLimitCPU": "t",
        "DefaultLimitCPUSoft": "t",
        "DefaultLimitDATA": "t",
        "DefaultLimitDATASoft": "t",
        "DefaultLimitFSIZE": "t",
        "DefaultLimitFSIZESoft": "t",
        "DefaultLimitLOCKS": "t",
        "DefaultLimitLOCKSSoft": "t",
        "DefaultLimitMEMLOCK": "t",
        "DefaultLimitMEMLOCKSoft": "t",
        "DefaultLimitMSGQUEUE": "t",
        "DefaultLimitMSGQUEUESoft": "t",
        "DefaultLimitNICE": "t",
        "DefaultLimitNICESoft": "t",
        "DefaultLimitNOFILE": "t",
        "DefaultLimitNOFILESoft": "t",
        "DefaultLimitNPROC": "t",
        "DefaultLimitNPROCSoft": "t",
        "DefaultLimitRSS": "t",
        "DefaultLimitRSSSoft": "t",
        "DefaultLimitRTPRIO": "t",
        "DefaultLimitRTPRIOSoft": "t",
        "DefaultLimitRTTIME": "t",
        "DefaultLimitRTTIMESoft": "t",
        "DefaultLimitSIGPENDING": "t",
        "DefaultLimitSIGPENDINGSoft": "t",
        "DefaultLimitSTACK": "t",
        "DefaultLimitSTACKSoft": "t",
        "DefaultMemoryAccounting": "b",
        "DefaultMemoryPressureThresholdUSec": "t",
        "DefaultMemoryPressureWatch": "s",
        "DefaultOOMPolicy": "s",
        "DefaultOOMScoreAdjust": "i",
        "DefaultRestartUSec": "t",
        "DefaultStandardError": "s",
        "DefaultStandardOutput": "s",
        "DefaultStartLimitBurst": "u",
        "DefaultStartLimitIntervalUSec": "t",
        "DefaultTasksAccounting": "b",
        "DefaultTasksMax": "t",
        "DefaultTimeoutAbortUSec": "t",
        "DefaultTimeoutStartUSec": "t",
        "DefaultTimeoutStopUSec": "t",
        "DefaultTimerAccuracyUSec": "t",
        "Environment": "as",
        "ExitCode": "y",
        "Features": "s",
        "FinishTimestamp": "t",
        "FinishTimestampMonotonic": "t",
        "FirmwareTimestamp": "t",
        "FirmwareTimestampMonotonic": "t",
        "GeneratorsFinishTimestamp": "t",
        "GeneratorsFinishTimestampMonotonic": "t",
        "GeneratorsStartTimestamp": "t",
        "GeneratorsStartTimestampMonotonic": "t",
        "InitRDGeneratorsFinishTimestamp": "t",
        "InitRDGeneratorsFinishTimestampMonotonic": "t",
        "InitRDGeneratorsStartTimestamp": "t",
        "InitRDGeneratorsStartTimestampMonotonic": "t",
        "InitRDSecurityFinishTimestamp": "t",
        "InitRDSecurityFinishTimestampMonotonic": "t",
        "InitRDSecurityStartTimestamp": "t",
        "InitRDSecurityStartTimestampMonotonic": "t",
        "InitRDTimestamp": "t",
        "InitRDTimestampMonotonic": "t",
        "InitRDUnitsLoadFinishTimestamp": "t",
        "InitRDUnitsLoadFinishTimestampMonotonic": "t",
        "InitRDUnitsLoadStartTimestamp": "t",
        "InitRDUnitsLoadStartTimestampMonotonic": "t",
        "KExecWatchdogUSec": "t",
        "KernelTimestamp": "t",
        "KernelTimestampMonotonic": "t",
        "LoaderTimestamp": "t",
        "LoaderTimestampMonotonic": "t",
        "LogLevel": "s",
        "LogTarget": "s",
        "NFailedJobs": "u",
        "NFailedUnits": "u",
        "NInstalledJobs": "u",
        "NJobs": "u",
        "NNames": "u",
        "Progress": "d",
        "RebootWatchdogUSec": "t",
        "RuntimeWatchdogPreGovernor": "s",
        "RuntimeWatchdogPreUSec": "t",
        "RuntimeWatchdogUSec": "t",
        "SecurityFinishTimestamp": "t",
        "SecurityFinishTimestampMonotonic": "t",
        "SecurityStartTimestamp": "t",
        "SecurityStartTimestampMonotonic": "t",
        "ServiceWatchdogs": "b",
        "ShowStatus": "b",
        "ShutdownStartTimestamp": "t",
        "ShutdownStartTimestampMonotonic": "t",
        "SoftRebootsCount": "u",
        "SystemState": "s",
        "Tainted": "s",
        "TimerSlackNSec": "t",
        "UnitPath": "as",
        "UnitsLoadFinishTimestamp": "t",
        "UnitsLoadFinishTimestampMonotonic": "t",
        "UnitsLoadStartTimestamp": "t",
        "UnitsLoadStartTimestampMonotonic": "t",
        "UnitsLoadTimestamp": "t",
        "UnitsLoadTimestampMonotonic": "t",
        "UserspaceTimestamp": "t",
        "UserspaceTimestampMonotonic": "t",
        "Version": "s",
        "Virtualization": "s",
        "WatchdogDevice": "s",
        "WatchdogLastPingTimestamp": "t",
        "WatchdogLastPingTimestampMonotonic": "t",
    }

    property string dbusArchitecture
    property string dbusConfidentialVirtualization
    property bool dbusConfirmSpawn
    property string dbusControlGroup
    property string dbusCtrlAltDelBurstAction
    property bool dbusDefaultBlockIOAccounting
    property bool dbusDefaultCPUAccounting
    property int dbusDefaultDeviceTimeoutUSec
    property bool dbusDefaultIOAccounting
    property bool dbusDefaultIPAccounting
    property int dbusDefaultLimitAS
    property int dbusDefaultLimitASSoft
    property int dbusDefaultLimitCORE
    property int dbusDefaultLimitCORESoft
    property int dbusDefaultLimitCPU
    property int dbusDefaultLimitCPUSoft
    property int dbusDefaultLimitDATA
    property int dbusDefaultLimitDATASoft
    property int dbusDefaultLimitFSIZE
    property int dbusDefaultLimitFSIZESoft
    property int dbusDefaultLimitLOCKS
    property int dbusDefaultLimitLOCKSSoft
    property int dbusDefaultLimitMEMLOCK
    property int dbusDefaultLimitMEMLOCKSoft
    property int dbusDefaultLimitMSGQUEUE
    property int dbusDefaultLimitMSGQUEUESoft
    property int dbusDefaultLimitNICE
    property int dbusDefaultLimitNICESoft
    property int dbusDefaultLimitNOFILE
    property int dbusDefaultLimitNOFILESoft
    property int dbusDefaultLimitNPROC
    property int dbusDefaultLimitNPROCSoft
    property int dbusDefaultLimitRSS
    property int dbusDefaultLimitRSSSoft
    property int dbusDefaultLimitRTPRIO
    property int dbusDefaultLimitRTPRIOSoft
    property int dbusDefaultLimitRTTIME
    property int dbusDefaultLimitRTTIMESoft
    property int dbusDefaultLimitSIGPENDING
    property int dbusDefaultLimitSIGPENDINGSoft
    property int dbusDefaultLimitSTACK
    property int dbusDefaultLimitSTACKSoft
    property bool dbusDefaultMemoryAccounting
    property int dbusDefaultMemoryPressureThresholdUSec
    property string dbusDefaultMemoryPressureWatch
    property string dbusDefaultOOMPolicy
    property int dbusDefaultOOMScoreAdjust
    property int dbusDefaultRestartUSec
    property string dbusDefaultStandardError
    property string dbusDefaultStandardOutput
    property int dbusDefaultStartLimitBurst
    property int dbusDefaultStartLimitIntervalUSec
    property bool dbusDefaultTasksAccounting
    property int dbusDefaultTasksMax
    property int dbusDefaultTimeoutAbortUSec
    property int dbusDefaultTimeoutStartUSec
    property int dbusDefaultTimeoutStopUSec
    property int dbusDefaultTimerAccuracyUSec
    property list<string> dbusEnvironment
    property int dbusExitCode
    property string dbusFeatures
    property int dbusFinishTimestamp
    property int dbusFinishTimestampMonotonic
    property int dbusFirmwareTimestamp
    property int dbusFirmwareTimestampMonotonic
    property int dbusGeneratorsFinishTimestamp
    property int dbusGeneratorsFinishTimestampMonotonic
    property int dbusGeneratorsStartTimestamp
    property int dbusGeneratorsStartTimestampMonotonic
    property int dbusInitRDGeneratorsFinishTimestamp
    property int dbusInitRDGeneratorsFinishTimestampMonotonic
    property int dbusInitRDGeneratorsStartTimestamp
    property int dbusInitRDGeneratorsStartTimestampMonotonic
    property int dbusInitRDSecurityFinishTimestamp
    property int dbusInitRDSecurityFinishTimestampMonotonic
    property int dbusInitRDSecurityStartTimestamp
    property int dbusInitRDSecurityStartTimestampMonotonic
    property int dbusInitRDTimestamp
    property int dbusInitRDTimestampMonotonic
    property int dbusInitRDUnitsLoadFinishTimestamp
    property int dbusInitRDUnitsLoadFinishTimestampMonotonic
    property int dbusInitRDUnitsLoadStartTimestamp
    property int dbusInitRDUnitsLoadStartTimestampMonotonic
    property int dbusKExecWatchdogUSec
    property int dbusKernelTimestamp
    property int dbusKernelTimestampMonotonic
    property int dbusLoaderTimestamp
    property int dbusLoaderTimestampMonotonic
    property string dbusLogLevel
    property string dbusLogTarget
    property int dbusNFailedJobs
    property int dbusNFailedUnits
    property int dbusNInstalledJobs
    property int dbusNJobs
    property int dbusNNames
    property double dbusProgress
    property int dbusRebootWatchdogUSec
    property string dbusRuntimeWatchdogPreGovernor
    property int dbusRuntimeWatchdogPreUSec
    property int dbusRuntimeWatchdogUSec
    property int dbusSecurityFinishTimestamp
    property int dbusSecurityFinishTimestampMonotonic
    property int dbusSecurityStartTimestamp
    property int dbusSecurityStartTimestampMonotonic
    property bool dbusServiceWatchdogs
    property bool dbusShowStatus
    property int dbusShutdownStartTimestamp
    property int dbusShutdownStartTimestampMonotonic
    property int dbusSoftRebootsCount
    property string dbusSystemState
    property string dbusTainted
    property int dbusTimerSlackNSec
    property list<string> dbusUnitPath
    property int dbusUnitsLoadFinishTimestamp
    property int dbusUnitsLoadFinishTimestampMonotonic
    property int dbusUnitsLoadStartTimestamp
    property int dbusUnitsLoadStartTimestampMonotonic
    property int dbusUnitsLoadTimestamp
    property int dbusUnitsLoadTimestampMonotonic
    property int dbusUserspaceTimestamp
    property int dbusUserspaceTimestampMonotonic
    property string dbusVersion
    property string dbusVirtualization
    property string dbusWatchdogDevice
    property int dbusWatchdogLastPingTimestamp
    property int dbusWatchdogLastPingTimestampMonotonic

    signal dbusJobNew(id: int, job: var, unit: string)
    signal dbusJobRemoved(id: int, job: var, unit: string, result: string)
    signal dbusReloading(active: bool)
    signal dbusStartupFinished(firmware: int, loader: int, kernel: int, initrd: int, userspace: int, total: int)
    signal dbusUnitFilesChanged()
    signal dbusUnitNew(id: string, unit: var)
    signal dbusUnitRemoved(id: string, unit: var)

    function dbusAbandonScopeAsync(name: string): var {
        return new Promise((resolve, reject) => { iface.asyncCall("AbandonScope", "s", [...arguments], resolve, reject) })
    }
    function dbusAbandonScopeSync(name: string) {
        return iface.syncCall("AbandonScope", "s", [...arguments])
    }
    function dbusAddDependencyUnitFilesAsync(files: list<string>, target: string, type: string, runtime: bool, force: bool): var {
        return new Promise((resolve, reject) => { iface.asyncCall("AddDependencyUnitFiles", "asssbb", [...arguments], resolve, reject) })
    }
    function dbusAddDependencyUnitFilesSync(files: list<string>, target: string, type: string, runtime: bool, force: bool): var {
        return iface.syncCall("AddDependencyUnitFiles", "asssbb", [...arguments])
    }
    function dbusAttachProcessesToUnitAsync(unit_name: string, subcgroup: string, pids: var): var {
        return new Promise((resolve, reject) => { iface.asyncCall("AttachProcessesToUnit", "ssau", [...arguments], resolve, reject) })
    }
    function dbusAttachProcessesToUnitSync(unit_name: string, subcgroup: string, pids: var) {
        return iface.syncCall("AttachProcessesToUnit", "ssau", [...arguments])
    }
    function dbusBindMountUnitAsync(name: string, source: string, destination: string, read_only: bool, mkdir: bool): var {
        return new Promise((resolve, reject) => { iface.asyncCall("BindMountUnit", "sssbb", [...arguments], resolve, reject) })
    }
    function dbusBindMountUnitSync(name: string, source: string, destination: string, read_only: bool, mkdir: bool) {
        return iface.syncCall("BindMountUnit", "sssbb", [...arguments])
    }
    function dbusCancelJobAsync(id: int): var {
        return new Promise((resolve, reject) => { iface.asyncCall("CancelJob", "u", [...arguments], resolve, reject) })
    }
    function dbusCancelJobSync(id: int) {
        return iface.syncCall("CancelJob", "u", [...arguments])
    }
    function dbusCleanUnitAsync(name: string, mask: list<string>): var {
        return new Promise((resolve, reject) => { iface.asyncCall("CleanUnit", "sas", [...arguments], resolve, reject) })
    }
    function dbusCleanUnitSync(name: string, mask: list<string>) {
        return iface.syncCall("CleanUnit", "sas", [...arguments])
    }
    function dbusClearJobsAsync(): var {
        return new Promise((resolve, reject) => { iface.asyncCall("ClearJobs", "", [...arguments], resolve, reject) })
    }
    function dbusClearJobsSync() {
        return iface.syncCall("ClearJobs", "", [...arguments])
    }
    function dbusDisableUnitFilesAsync(files: list<string>, runtime: bool): var {
        return new Promise((resolve, reject) => { iface.asyncCall("DisableUnitFiles", "asb", [...arguments], resolve, reject) })
    }
    function dbusDisableUnitFilesSync(files: list<string>, runtime: bool): var {
        return iface.syncCall("DisableUnitFiles", "asb", [...arguments])
    }
    function dbusDisableUnitFilesWithFlagsAsync(files: list<string>, flags: int): var {
        return new Promise((resolve, reject) => { iface.asyncCall("DisableUnitFilesWithFlags", "ast", [...arguments], resolve, reject) })
    }
    function dbusDisableUnitFilesWithFlagsSync(files: list<string>, flags: int): var {
        return iface.syncCall("DisableUnitFilesWithFlags", "ast", [...arguments])
    }
    function dbusDisableUnitFilesWithFlagsAndInstallInfoAsync(files: list<string>, flags: int): var {
        return new Promise((resolve, reject) => { iface.asyncCall("DisableUnitFilesWithFlagsAndInstallInfo", "ast", [...arguments], resolve, reject) })
    }
    function dbusDisableUnitFilesWithFlagsAndInstallInfoSync(files: list<string>, flags: int): list<var> {
        return iface.syncCall("DisableUnitFilesWithFlagsAndInstallInfo", "ast", [...arguments])
    }
    function dbusDumpAsync(): var {
        return new Promise((resolve, reject) => { iface.asyncCall("Dump", "", [...arguments], resolve, reject) })
    }
    function dbusDumpSync(): string {
        return iface.syncCall("Dump", "", [...arguments])
    }
    function dbusDumpByFileDescriptorAsync(): var {
        return new Promise((resolve, reject) => { iface.asyncCall("DumpByFileDescriptor", "", [...arguments], resolve, reject) })
    }
    function dbusDumpByFileDescriptorSync(): var {
        return iface.syncCall("DumpByFileDescriptor", "", [...arguments])
    }
    function dbusDumpUnitFileDescriptorStoreAsync(name: string): var {
        return new Promise((resolve, reject) => { iface.asyncCall("DumpUnitFileDescriptorStore", "s", [...arguments], resolve, reject) })
    }
    function dbusDumpUnitFileDescriptorStoreSync(name: string): var {
        return iface.syncCall("DumpUnitFileDescriptorStore", "s", [...arguments])
    }
    function dbusDumpUnitsMatchingPatternsAsync(patterns: list<string>): var {
        return new Promise((resolve, reject) => { iface.asyncCall("DumpUnitsMatchingPatterns", "as", [...arguments], resolve, reject) })
    }
    function dbusDumpUnitsMatchingPatternsSync(patterns: list<string>): string {
        return iface.syncCall("DumpUnitsMatchingPatterns", "as", [...arguments])
    }
    function dbusDumpUnitsMatchingPatternsByFileDescriptorAsync(patterns: list<string>): var {
        return new Promise((resolve, reject) => { iface.asyncCall("DumpUnitsMatchingPatternsByFileDescriptor", "as", [...arguments], resolve, reject) })
    }
    function dbusDumpUnitsMatchingPatternsByFileDescriptorSync(patterns: list<string>): var {
        return iface.syncCall("DumpUnitsMatchingPatternsByFileDescriptor", "as", [...arguments])
    }
    function dbusEnableUnitFilesAsync(files: list<string>, runtime: bool, force: bool): var {
        return new Promise((resolve, reject) => { iface.asyncCall("EnableUnitFiles", "asbb", [...arguments], resolve, reject) })
    }
    function dbusEnableUnitFilesSync(files: list<string>, runtime: bool, force: bool): list<var> {
        return iface.syncCall("EnableUnitFiles", "asbb", [...arguments])
    }
    function dbusEnableUnitFilesWithFlagsAsync(files: list<string>, flags: int): var {
        return new Promise((resolve, reject) => { iface.asyncCall("EnableUnitFilesWithFlags", "ast", [...arguments], resolve, reject) })
    }
    function dbusEnableUnitFilesWithFlagsSync(files: list<string>, flags: int): list<var> {
        return iface.syncCall("EnableUnitFilesWithFlags", "ast", [...arguments])
    }
    function dbusEnqueueMarkedJobsAsync(): var {
        return new Promise((resolve, reject) => { iface.asyncCall("EnqueueMarkedJobs", "", [...arguments], resolve, reject) })
    }
    function dbusEnqueueMarkedJobsSync(): var {
        return iface.syncCall("EnqueueMarkedJobs", "", [...arguments])
    }
    function dbusEnqueueUnitJobAsync(name: string, job_type: string, job_mode: string): var {
        return new Promise((resolve, reject) => { iface.asyncCall("EnqueueUnitJob", "sss", [...arguments], resolve, reject) })
    }
    function dbusEnqueueUnitJobSync(name: string, job_type: string, job_mode: string): list<var> {
        return iface.syncCall("EnqueueUnitJob", "sss", [...arguments])
    }
    function dbusExitAsync(): var {
        return new Promise((resolve, reject) => { iface.asyncCall("Exit", "", [...arguments], resolve, reject) })
    }
    function dbusExitSync() {
        return iface.syncCall("Exit", "", [...arguments])
    }
    function dbusFreezeUnitAsync(name: string): var {
        return new Promise((resolve, reject) => { iface.asyncCall("FreezeUnit", "s", [...arguments], resolve, reject) })
    }
    function dbusFreezeUnitSync(name: string) {
        return iface.syncCall("FreezeUnit", "s", [...arguments])
    }
    function dbusGetDefaultTargetAsync(): var {
        return new Promise((resolve, reject) => { iface.asyncCall("GetDefaultTarget", "", [...arguments], resolve, reject) })
    }
    function dbusGetDefaultTargetSync(): string {
        return iface.syncCall("GetDefaultTarget", "", [...arguments])
    }
    function dbusGetDynamicUsersAsync(): var {
        return new Promise((resolve, reject) => { iface.asyncCall("GetDynamicUsers", "", [...arguments], resolve, reject) })
    }
    function dbusGetDynamicUsersSync(): var {
        return iface.syncCall("GetDynamicUsers", "", [...arguments])
    }
    function dbusGetJobAsync(id: int): var {
        return new Promise((resolve, reject) => { iface.asyncCall("GetJob", "u", [...arguments], resolve, reject) })
    }
    function dbusGetJobSync(id: int): var {
        return iface.syncCall("GetJob", "u", [...arguments])
    }
    function dbusGetJobAfterAsync(id: int): var {
        return new Promise((resolve, reject) => { iface.asyncCall("GetJobAfter", "u", [...arguments], resolve, reject) })
    }
    function dbusGetJobAfterSync(id: int): var {
        return iface.syncCall("GetJobAfter", "u", [...arguments])
    }
    function dbusGetJobBeforeAsync(id: int): var {
        return new Promise((resolve, reject) => { iface.asyncCall("GetJobBefore", "u", [...arguments], resolve, reject) })
    }
    function dbusGetJobBeforeSync(id: int): var {
        return iface.syncCall("GetJobBefore", "u", [...arguments])
    }
    function dbusGetUnitAsync(name: string): var {
        return new Promise((resolve, reject) => { iface.asyncCall("GetUnit", "s", [...arguments], resolve, reject) })
    }
    function dbusGetUnitSync(name: string): var {
        return iface.syncCall("GetUnit", "s", [...arguments])
    }
    function dbusGetUnitByControlGroupAsync(cgroup: string): var {
        return new Promise((resolve, reject) => { iface.asyncCall("GetUnitByControlGroup", "s", [...arguments], resolve, reject) })
    }
    function dbusGetUnitByControlGroupSync(cgroup: string): var {
        return iface.syncCall("GetUnitByControlGroup", "s", [...arguments])
    }
    function dbusGetUnitByInvocationIDAsync(invocation_id: var): var {
        return new Promise((resolve, reject) => { iface.asyncCall("GetUnitByInvocationID", "ay", [...arguments], resolve, reject) })
    }
    function dbusGetUnitByInvocationIDSync(invocation_id: var): var {
        return iface.syncCall("GetUnitByInvocationID", "ay", [...arguments])
    }
    function dbusGetUnitByPIDAsync(pid: int): var {
        return new Promise((resolve, reject) => { iface.asyncCall("GetUnitByPID", "u", [...arguments], resolve, reject) })
    }
    function dbusGetUnitByPIDSync(pid: int): var {
        return iface.syncCall("GetUnitByPID", "u", [...arguments])
    }
    function dbusGetUnitByPIDFDAsync(pidfd: var): var {
        return new Promise((resolve, reject) => { iface.asyncCall("GetUnitByPIDFD", "h", [...arguments], resolve, reject) })
    }
    function dbusGetUnitByPIDFDSync(pidfd: var): list<var> {
        return iface.syncCall("GetUnitByPIDFD", "h", [...arguments])
    }
    function dbusGetUnitFileLinksAsync(name: string, runtime: bool): var {
        return new Promise((resolve, reject) => { iface.asyncCall("GetUnitFileLinks", "sb", [...arguments], resolve, reject) })
    }
    function dbusGetUnitFileLinksSync(name: string, runtime: bool): list<string> {
        return iface.syncCall("GetUnitFileLinks", "sb", [...arguments])
    }
    function dbusGetUnitFileStateAsync(file: string): var {
        return new Promise((resolve, reject) => { iface.asyncCall("GetUnitFileState", "s", [...arguments], resolve, reject) })
    }
    function dbusGetUnitFileStateSync(file: string): string {
        return iface.syncCall("GetUnitFileState", "s", [...arguments])
    }
    function dbusGetUnitProcessesAsync(name: string): var {
        return new Promise((resolve, reject) => { iface.asyncCall("GetUnitProcesses", "s", [...arguments], resolve, reject) })
    }
    function dbusGetUnitProcessesSync(name: string): var {
        return iface.syncCall("GetUnitProcesses", "s", [...arguments])
    }
    function dbusHaltAsync(): var {
        return new Promise((resolve, reject) => { iface.asyncCall("Halt", "", [...arguments], resolve, reject) })
    }
    function dbusHaltSync() {
        return iface.syncCall("Halt", "", [...arguments])
    }
    function dbusKExecAsync(): var {
        return new Promise((resolve, reject) => { iface.asyncCall("KExec", "", [...arguments], resolve, reject) })
    }
    function dbusKExecSync() {
        return iface.syncCall("KExec", "", [...arguments])
    }
    function dbusKillUnitAsync(name: string, whom: string, signal: int): var {
        return new Promise((resolve, reject) => { iface.asyncCall("KillUnit", "ssi", [...arguments], resolve, reject) })
    }
    function dbusKillUnitSync(name: string, whom: string, signal: int) {
        return iface.syncCall("KillUnit", "ssi", [...arguments])
    }
    function dbusLinkUnitFilesAsync(files: list<string>, runtime: bool, force: bool): var {
        return new Promise((resolve, reject) => { iface.asyncCall("LinkUnitFiles", "asbb", [...arguments], resolve, reject) })
    }
    function dbusLinkUnitFilesSync(files: list<string>, runtime: bool, force: bool): var {
        return iface.syncCall("LinkUnitFiles", "asbb", [...arguments])
    }
    function dbusListJobsAsync(): var {
        return new Promise((resolve, reject) => { iface.asyncCall("ListJobs", "", [...arguments], resolve, reject) })
    }
    function dbusListJobsSync(): var {
        return iface.syncCall("ListJobs", "", [...arguments])
    }
    function dbusListUnitFilesAsync(): var {
        return new Promise((resolve, reject) => { iface.asyncCall("ListUnitFiles", "", [...arguments], resolve, reject) })
    }
    function dbusListUnitFilesSync(): var {
        return iface.syncCall("ListUnitFiles", "", [...arguments])
    }
    function dbusListUnitFilesByPatternsAsync(states: list<string>, patterns: list<string>): var {
        return new Promise((resolve, reject) => { iface.asyncCall("ListUnitFilesByPatterns", "asas", [...arguments], resolve, reject) })
    }
    function dbusListUnitFilesByPatternsSync(states: list<string>, patterns: list<string>): var {
        return iface.syncCall("ListUnitFilesByPatterns", "asas", [...arguments])
    }
    function dbusListUnitsAsync(): var {
        return new Promise((resolve, reject) => { iface.asyncCall("ListUnits", "", [...arguments], resolve, reject) })
    }
    function dbusListUnitsSync(): var {
        return iface.syncCall("ListUnits", "", [...arguments])
    }
    function dbusListUnitsByNamesAsync(names: list<string>): var {
        return new Promise((resolve, reject) => { iface.asyncCall("ListUnitsByNames", "as", [...arguments], resolve, reject) })
    }
    function dbusListUnitsByNamesSync(names: list<string>): var {
        return iface.syncCall("ListUnitsByNames", "as", [...arguments])
    }
    function dbusListUnitsByPatternsAsync(states: list<string>, patterns: list<string>): var {
        return new Promise((resolve, reject) => { iface.asyncCall("ListUnitsByPatterns", "asas", [...arguments], resolve, reject) })
    }
    function dbusListUnitsByPatternsSync(states: list<string>, patterns: list<string>): var {
        return iface.syncCall("ListUnitsByPatterns", "asas", [...arguments])
    }
    function dbusListUnitsFilteredAsync(states: list<string>): var {
        return new Promise((resolve, reject) => { iface.asyncCall("ListUnitsFiltered", "as", [...arguments], resolve, reject) })
    }
    function dbusListUnitsFilteredSync(states: list<string>): var {
        return iface.syncCall("ListUnitsFiltered", "as", [...arguments])
    }
    function dbusLoadUnitAsync(name: string): var {
        return new Promise((resolve, reject) => { iface.asyncCall("LoadUnit", "s", [...arguments], resolve, reject) })
    }
    function dbusLoadUnitSync(name: string): var {
        return iface.syncCall("LoadUnit", "s", [...arguments])
    }
    function dbusLookupDynamicUserByNameAsync(name: string): var {
        return new Promise((resolve, reject) => { iface.asyncCall("LookupDynamicUserByName", "s", [...arguments], resolve, reject) })
    }
    function dbusLookupDynamicUserByNameSync(name: string): int {
        return iface.syncCall("LookupDynamicUserByName", "s", [...arguments])
    }
    function dbusLookupDynamicUserByUIDAsync(uid: int): var {
        return new Promise((resolve, reject) => { iface.asyncCall("LookupDynamicUserByUID", "u", [...arguments], resolve, reject) })
    }
    function dbusLookupDynamicUserByUIDSync(uid: int): string {
        return iface.syncCall("LookupDynamicUserByUID", "u", [...arguments])
    }
    function dbusMaskUnitFilesAsync(files: list<string>, runtime: bool, force: bool): var {
        return new Promise((resolve, reject) => { iface.asyncCall("MaskUnitFiles", "asbb", [...arguments], resolve, reject) })
    }
    function dbusMaskUnitFilesSync(files: list<string>, runtime: bool, force: bool): var {
        return iface.syncCall("MaskUnitFiles", "asbb", [...arguments])
    }
    function dbusMountImageUnitAsync(name: string, source: string, destination: string, read_only: bool, mkdir: bool, options: var): var {
        return new Promise((resolve, reject) => { iface.asyncCall("MountImageUnit", "sssbba(ss)", [...arguments], resolve, reject) })
    }
    function dbusMountImageUnitSync(name: string, source: string, destination: string, read_only: bool, mkdir: bool, options: var) {
        return iface.syncCall("MountImageUnit", "sssbba(ss)", [...arguments])
    }
    function dbusPowerOffAsync(): var {
        return new Promise((resolve, reject) => { iface.asyncCall("PowerOff", "", [...arguments], resolve, reject) })
    }
    function dbusPowerOffSync() {
        return iface.syncCall("PowerOff", "", [...arguments])
    }
    function dbusPresetAllUnitFilesAsync(mode: string, runtime: bool, force: bool): var {
        return new Promise((resolve, reject) => { iface.asyncCall("PresetAllUnitFiles", "sbb", [...arguments], resolve, reject) })
    }
    function dbusPresetAllUnitFilesSync(mode: string, runtime: bool, force: bool): var {
        return iface.syncCall("PresetAllUnitFiles", "sbb", [...arguments])
    }
    function dbusPresetUnitFilesAsync(files: list<string>, runtime: bool, force: bool): var {
        return new Promise((resolve, reject) => { iface.asyncCall("PresetUnitFiles", "asbb", [...arguments], resolve, reject) })
    }
    function dbusPresetUnitFilesSync(files: list<string>, runtime: bool, force: bool): list<var> {
        return iface.syncCall("PresetUnitFiles", "asbb", [...arguments])
    }
    function dbusPresetUnitFilesWithModeAsync(files: list<string>, mode: string, runtime: bool, force: bool): var {
        return new Promise((resolve, reject) => { iface.asyncCall("PresetUnitFilesWithMode", "assbb", [...arguments], resolve, reject) })
    }
    function dbusPresetUnitFilesWithModeSync(files: list<string>, mode: string, runtime: bool, force: bool): list<var> {
        return iface.syncCall("PresetUnitFilesWithMode", "assbb", [...arguments])
    }
    function dbusQueueSignalUnitAsync(name: string, whom: string, signal: int, value: int): var {
        return new Promise((resolve, reject) => { iface.asyncCall("QueueSignalUnit", "ssii", [...arguments], resolve, reject) })
    }
    function dbusQueueSignalUnitSync(name: string, whom: string, signal: int, value: int) {
        return iface.syncCall("QueueSignalUnit", "ssii", [...arguments])
    }
    function dbusRebootAsync(): var {
        return new Promise((resolve, reject) => { iface.asyncCall("Reboot", "", [...arguments], resolve, reject) })
    }
    function dbusRebootSync() {
        return iface.syncCall("Reboot", "", [...arguments])
    }
    function dbusReenableUnitFilesAsync(files: list<string>, runtime: bool, force: bool): var {
        return new Promise((resolve, reject) => { iface.asyncCall("ReenableUnitFiles", "asbb", [...arguments], resolve, reject) })
    }
    function dbusReenableUnitFilesSync(files: list<string>, runtime: bool, force: bool): list<var> {
        return iface.syncCall("ReenableUnitFiles", "asbb", [...arguments])
    }
    function dbusReexecuteAsync(): var {
        return new Promise((resolve, reject) => { iface.asyncCall("Reexecute", "", [...arguments], resolve, reject) })
    }
    function dbusReexecuteSync() {
        return iface.syncCall("Reexecute", "", [...arguments])
    }
    function dbusRefUnitAsync(name: string): var {
        return new Promise((resolve, reject) => { iface.asyncCall("RefUnit", "s", [...arguments], resolve, reject) })
    }
    function dbusRefUnitSync(name: string) {
        return iface.syncCall("RefUnit", "s", [...arguments])
    }
    function dbusReloadAsync(): var {
        return new Promise((resolve, reject) => { iface.asyncCall("Reload", "", [...arguments], resolve, reject) })
    }
    function dbusReloadSync() {
        return iface.syncCall("Reload", "", [...arguments])
    }
    function dbusReloadOrRestartUnitAsync(name: string, mode: string): var {
        return new Promise((resolve, reject) => { iface.asyncCall("ReloadOrRestartUnit", "ss", [...arguments], resolve, reject) })
    }
    function dbusReloadOrRestartUnitSync(name: string, mode: string): var {
        return iface.syncCall("ReloadOrRestartUnit", "ss", [...arguments])
    }
    function dbusReloadOrTryRestartUnitAsync(name: string, mode: string): var {
        return new Promise((resolve, reject) => { iface.asyncCall("ReloadOrTryRestartUnit", "ss", [...arguments], resolve, reject) })
    }
    function dbusReloadOrTryRestartUnitSync(name: string, mode: string): var {
        return iface.syncCall("ReloadOrTryRestartUnit", "ss", [...arguments])
    }
    function dbusReloadUnitAsync(name: string, mode: string): var {
        return new Promise((resolve, reject) => { iface.asyncCall("ReloadUnit", "ss", [...arguments], resolve, reject) })
    }
    function dbusReloadUnitSync(name: string, mode: string): var {
        return iface.syncCall("ReloadUnit", "ss", [...arguments])
    }
    function dbusRemoveSubgroupFromUnitAsync(unit_name: string, subcgroup: string, flags: int): var {
        return new Promise((resolve, reject) => { iface.asyncCall("RemoveSubgroupFromUnit", "sst", [...arguments], resolve, reject) })
    }
    function dbusRemoveSubgroupFromUnitSync(unit_name: string, subcgroup: string, flags: int) {
        return iface.syncCall("RemoveSubgroupFromUnit", "sst", [...arguments])
    }
    function dbusResetFailedAsync(): var {
        return new Promise((resolve, reject) => { iface.asyncCall("ResetFailed", "", [...arguments], resolve, reject) })
    }
    function dbusResetFailedSync() {
        return iface.syncCall("ResetFailed", "", [...arguments])
    }
    function dbusResetFailedUnitAsync(name: string): var {
        return new Promise((resolve, reject) => { iface.asyncCall("ResetFailedUnit", "s", [...arguments], resolve, reject) })
    }
    function dbusResetFailedUnitSync(name: string) {
        return iface.syncCall("ResetFailedUnit", "s", [...arguments])
    }
    function dbusRestartUnitAsync(name: string, mode: string): var {
        return new Promise((resolve, reject) => { iface.asyncCall("RestartUnit", "ss", [...arguments], resolve, reject) })
    }
    function dbusRestartUnitSync(name: string, mode: string): var {
        return iface.syncCall("RestartUnit", "ss", [...arguments])
    }
    function dbusRevertUnitFilesAsync(files: list<string>): var {
        return new Promise((resolve, reject) => { iface.asyncCall("RevertUnitFiles", "as", [...arguments], resolve, reject) })
    }
    function dbusRevertUnitFilesSync(files: list<string>): var {
        return iface.syncCall("RevertUnitFiles", "as", [...arguments])
    }
    function dbusSetDefaultTargetAsync(name: string, force: bool): var {
        return new Promise((resolve, reject) => { iface.asyncCall("SetDefaultTarget", "sb", [...arguments], resolve, reject) })
    }
    function dbusSetDefaultTargetSync(name: string, force: bool): var {
        return iface.syncCall("SetDefaultTarget", "sb", [...arguments])
    }
    function dbusSetEnvironmentAsync(assignments: list<string>): var {
        return new Promise((resolve, reject) => { iface.asyncCall("SetEnvironment", "as", [...arguments], resolve, reject) })
    }
    function dbusSetEnvironmentSync(assignments: list<string>) {
        return iface.syncCall("SetEnvironment", "as", [...arguments])
    }
    function dbusSetExitCodeAsync(number: int): var {
        return new Promise((resolve, reject) => { iface.asyncCall("SetExitCode", "y", [...arguments], resolve, reject) })
    }
    function dbusSetExitCodeSync(number: int) {
        return iface.syncCall("SetExitCode", "y", [...arguments])
    }
    function dbusSetShowStatusAsync(mode: string): var {
        return new Promise((resolve, reject) => { iface.asyncCall("SetShowStatus", "s", [...arguments], resolve, reject) })
    }
    function dbusSetShowStatusSync(mode: string) {
        return iface.syncCall("SetShowStatus", "s", [...arguments])
    }
    function dbusSetUnitPropertiesAsync(name: string, runtime: bool, properties: var): var {
        return new Promise((resolve, reject) => { iface.asyncCall("SetUnitProperties", "sba(sv)", [...arguments], resolve, reject) })
    }
    function dbusSetUnitPropertiesSync(name: string, runtime: bool, properties: var) {
        return iface.syncCall("SetUnitProperties", "sba(sv)", [...arguments])
    }
    function dbusSoftRebootAsync(new_root: string): var {
        return new Promise((resolve, reject) => { iface.asyncCall("SoftReboot", "s", [...arguments], resolve, reject) })
    }
    function dbusSoftRebootSync(new_root: string) {
        return iface.syncCall("SoftReboot", "s", [...arguments])
    }
    @Deprecated {}
    function dbusStartAuxiliaryScopeAsync(name: string, pidfds: var, flags: int, properties: var): var {
        return new Promise((resolve, reject) => { iface.asyncCall("StartAuxiliaryScope", "sahta(sv)", [...arguments], resolve, reject) })
    }
    function dbusStartAuxiliaryScopeSync(name: string, pidfds: var, flags: int, properties: var): var {
        return iface.syncCall("StartAuxiliaryScope", "sahta(sv)", [...arguments])
    }
    function dbusStartTransientUnitAsync(name: string, mode: string, properties: var, aux: var): var {
        return new Promise((resolve, reject) => { iface.asyncCall("StartTransientUnit", "ssa(sv)a(sa(sv))", [...arguments], resolve, reject) })
    }
    function dbusStartTransientUnitSync(name: string, mode: string, properties: var, aux: var): var {
        return iface.syncCall("StartTransientUnit", "ssa(sv)a(sa(sv))", [...arguments])
    }
    function dbusStartUnitAsync(name: string, mode: string): var {
        return new Promise((resolve, reject) => { iface.asyncCall("StartUnit", "ss", [...arguments], resolve, reject) })
    }
    function dbusStartUnitSync(name: string, mode: string): var {
        return iface.syncCall("StartUnit", "ss", [...arguments])
    }
    function dbusStartUnitReplaceAsync(old_unit: string, new_unit: string, mode: string): var {
        return new Promise((resolve, reject) => { iface.asyncCall("StartUnitReplace", "sss", [...arguments], resolve, reject) })
    }
    function dbusStartUnitReplaceSync(old_unit: string, new_unit: string, mode: string): var {
        return iface.syncCall("StartUnitReplace", "sss", [...arguments])
    }
    function dbusStartUnitWithFlagsAsync(name: string, mode: string, flags: int): var {
        return new Promise((resolve, reject) => { iface.asyncCall("StartUnitWithFlags", "sst", [...arguments], resolve, reject) })
    }
    function dbusStartUnitWithFlagsSync(name: string, mode: string, flags: int): var {
        return iface.syncCall("StartUnitWithFlags", "sst", [...arguments])
    }
    function dbusStopUnitAsync(name: string, mode: string): var {
        return new Promise((resolve, reject) => { iface.asyncCall("StopUnit", "ss", [...arguments], resolve, reject) })
    }
    function dbusStopUnitSync(name: string, mode: string): var {
        return iface.syncCall("StopUnit", "ss", [...arguments])
    }
    function dbusSubscribeAsync(): var {
        return new Promise((resolve, reject) => { iface.asyncCall("Subscribe", "", [...arguments], resolve, reject) })
    }
    function dbusSubscribeSync() {
        return iface.syncCall("Subscribe", "", [...arguments])
    }
    function dbusSwitchRootAsync(new_root: string, init: string): var {
        return new Promise((resolve, reject) => { iface.asyncCall("SwitchRoot", "ss", [...arguments], resolve, reject) })
    }
    function dbusSwitchRootSync(new_root: string, init: string) {
        return iface.syncCall("SwitchRoot", "ss", [...arguments])
    }
    function dbusThawUnitAsync(name: string): var {
        return new Promise((resolve, reject) => { iface.asyncCall("ThawUnit", "s", [...arguments], resolve, reject) })
    }
    function dbusThawUnitSync(name: string) {
        return iface.syncCall("ThawUnit", "s", [...arguments])
    }
    function dbusTryRestartUnitAsync(name: string, mode: string): var {
        return new Promise((resolve, reject) => { iface.asyncCall("TryRestartUnit", "ss", [...arguments], resolve, reject) })
    }
    function dbusTryRestartUnitSync(name: string, mode: string): var {
        return iface.syncCall("TryRestartUnit", "ss", [...arguments])
    }
    function dbusUnmaskUnitFilesAsync(files: list<string>, runtime: bool): var {
        return new Promise((resolve, reject) => { iface.asyncCall("UnmaskUnitFiles", "asb", [...arguments], resolve, reject) })
    }
    function dbusUnmaskUnitFilesSync(files: list<string>, runtime: bool): var {
        return iface.syncCall("UnmaskUnitFiles", "asb", [...arguments])
    }
    function dbusUnrefUnitAsync(name: string): var {
        return new Promise((resolve, reject) => { iface.asyncCall("UnrefUnit", "s", [...arguments], resolve, reject) })
    }
    function dbusUnrefUnitSync(name: string) {
        return iface.syncCall("UnrefUnit", "s", [...arguments])
    }
    function dbusUnsetAndSetEnvironmentAsync(names: list<string>, assignments: list<string>): var {
        return new Promise((resolve, reject) => { iface.asyncCall("UnsetAndSetEnvironment", "asas", [...arguments], resolve, reject) })
    }
    function dbusUnsetAndSetEnvironmentSync(names: list<string>, assignments: list<string>) {
        return iface.syncCall("UnsetAndSetEnvironment", "asas", [...arguments])
    }
    function dbusUnsetEnvironmentAsync(names: list<string>): var {
        return new Promise((resolve, reject) => { iface.asyncCall("UnsetEnvironment", "as", [...arguments], resolve, reject) })
    }
    function dbusUnsetEnvironmentSync(names: list<string>) {
        return iface.syncCall("UnsetEnvironment", "as", [...arguments])
    }
    function dbusUnsubscribeAsync(): var {
        return new Promise((resolve, reject) => { iface.asyncCall("Unsubscribe", "", [...arguments], resolve, reject) })
    }
    function dbusUnsubscribeSync() {
        return iface.syncCall("Unsubscribe", "", [...arguments])
    }
}

